///// <autogenerated>Remove this line to stop Code Generation</autogenerated>
///// <by>serverservice.txt</by>
///// <module>Gender</module>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Gender.cs" company="Example">
//   The gender business logic
// </copyright>
// <summary>Defines the gender type.</summary>
// --------------------------------------------------------------------------------------------------------------------
namespace Example.Business.Service
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Example.Models;
    using Example.Business.Contracts;
    using Example.Entities.Repository;
    using Example.Data.Entities;
    using Example.Models.Common;
    using Example.Utilities;
    using LinqKit;

    ////region CustomCodeBlockUsing#
    ////endregion CustomCodeBlockUsing#
    /// <summary>The gender business Example.Logic.</summary>
    public class GenderService : IGenderService
    {
        private readonly IRepository<Gender> _repository;
        public GenderService(IRepository<Gender> repository)
        {
            _repository = repository;
        }

        private IQueryable<GenderModel> sortData(IQueryable<GenderModel> data, SortModel sortModel)
        {
            if (sortModel == null)
            {
                sortModel = new SortModel();
            }

            if (sortModel.SortOrder == "asc")
            {
                switch (sortModel.SortField)
                {
                }
            }
            else
            {
                switch (sortModel.SortField)
                {
                }
            }

            return data;
        }

        /// <summary>Get gender.</summary>
        /// <param name = "model">gender model.</param>
        /// <param name = "validModelParameters">The valid Model Parameters.</param> 
        /// <returns>The <see cref = "List"/>.</returns>
        public GetResponseModel<GenderModel> Get(GenderModel model, PaginationModel paginationModel = null, SortModel sortModel = null)
        {
            var perPage = 1000;
            var startIndex = 0;
            ///--------------------Pagination Data----------------------
            if (paginationModel != null)
            {
                if (paginationModel.PageSize != null)
                {
                    perPage = paginationModel.PageSize.Value;
                }

                if (paginationModel.PageNumber != null)
                {
                    startIndex = paginationModel.PageNumber.Value;
                }
            }

            var pagination = new Pagination<GenderModel>(startIndex, perPage);
            ///--------------------Predicate Conditions----------------------
            var predicate = PredicateBuilder.New<Gender>(true);
            ////region CustomCodeBlockPredicate#
            ////endregion CustomCodeBlockPredicate#
            var rows = _repository.Find(predicate);
            ///--------------------Select Data----------------------
            var results = rows.Select(x => new GenderModel()
            {////            region CustomCodeBlockSelection#
            ////            endregion CustomCodeBlockSelection#                  
            Id = x.Id, Title = x.Title, });
            ///--------------------Sorting Data-------------------------
            results = sortData(results, sortModel);
            pagination.results(results);
            ///--------------------Return----------------------
            return pagination;
        }

        /// <summary>Save gender.</summary>
        /// <param name = "model">gender model.</param>
        /// <returns>The <see cref = "GenderModel"/>.</returns>
        /// <param name = "validModelParameters">The valid Model Parameters.</param> 
        public RawResponseModel<GenderModel> Save(GenderModel model)
        {
            if (model != null)
            {
            }
            else
            {
                model = new GenderModel();
            }

            var entity = new Gender();
            if (model.Id > 0)
            {
                var data = _repository.Find(x => x.Id == model.Id);
                if (data.Any())
                    entity = data.FirstOrDefault();
                else
                    return new RawResponseModel<GenderModel>(null, "Gender does not exist!", false);
            }

            if (model.Id > 0)
            {
                entity.Id = model.Id;
            }

            if (model.Id == 0)
            {
                _repository.Create(entity);
            }
            else
            {
                _repository.Update(entity);
            }

            _repository.Save();
            model.Id = entity.Id;
            return new RawResponseModel<GenderModel>(model);
        }

        /// <summary>Delete gender.</summary>
        /// <param name = "model">gender model.</param>
        /// <returns>The <see cref = "GenderModel"/>.</returns>
        public DeleteResponseModel Delete(GenderModel model)
        {
            var entity = new Gender();
            if (model.Id <= 0)
            {
                return new DeleteResponseModel("Can't delete items due to missing some information or invalid data", false);
            }
            else
            {
                entity.Id = model.Id;
            }

            _repository.Delete(entity);
            _repository.Save();
            return new DeleteResponseModel("Deleted", true);
        }
    }
}