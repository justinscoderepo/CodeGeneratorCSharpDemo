///// <autogenerated>Remove this line to stop Code Generation</autogenerated>
///// <by>serverservice.txt</by>
///// <module>Category</module>
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="Category.cs" company="Example">
//   The category business logic
// </copyright>
// <summary>Defines the category type.</summary>
// --------------------------------------------------------------------------------------------------------------------
namespace Example.Business.Service
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Example.Models;
    using Example.Business.Contracts;
    using Example.Entities.Repository;
    using Example.Data.Entities;
    using Example.Models.Common;
    using Example.Utilities;
    using LinqKit;

    ////region CustomCodeBlockUsing#
    ////endregion CustomCodeBlockUsing#
    /// <summary>The category business Example.Logic.</summary>
    public class CategoryService : ICategoryService
    {
        private readonly IRepository<Category> _repository;
        public CategoryService(IRepository<Category> repository)
        {
            _repository = repository;
        }

        /// <summary>Get category.</summary>
        /// <param name = "model">category model.</param>
        /// <param name = "validModelParameters">The valid Model Parameters.</param> 
        /// <returns>The <see cref = "List"/>.</returns>
        public GetResponseModel<CategoryModel> Get(CategoryModel model)
        {
            var perPage = 1000;
            var startIndex = 0;
            var pagination = new Pagination<CategoryModel>(startIndex, perPage);
            ///--------------------Predicate Conditions----------------------
            var predicate = PredicateBuilder.New<Category>(true);
            ////region CustomCodeBlockPredicate#
            ////endregion CustomCodeBlockPredicate#
            var rows = _repository.Find(predicate);
            ///--------------------Select Data----------------------
            var results = rows.Select(x => new CategoryModel()
            {////            region CustomCodeBlockSelection#
            ////            endregion CustomCodeBlockSelection#                  
            Name = x.Name, Description = x.Description, Id = x.Id, });
            ///--------------------Sorting Data-------------------------
            pagination.results(results);
            ///--------------------Return----------------------
            return pagination;
        }

        /// <summary>Save category.</summary>
        /// <param name = "model">category model.</param>
        /// <returns>The <see cref = "CategoryModel"/>.</returns>
        /// <param name = "validModelParameters">The valid Model Parameters.</param> 
        public RawResponseModel<CategoryModel> Save(CategoryModel model)
        {
            if (model != null)
            {
            }
            else
            {
                model = new CategoryModel();
            }

            var entity = new Category();
            if (model.Id > 0)
            {
                var data = _repository.Find(x => x.Id == model.Id);
                if (data.Any())
                    entity = data.FirstOrDefault();
                else
                    return new RawResponseModel<CategoryModel>(null, "Category does not exist!", false);
            }

            if (model.Id > 0)
            {
                entity.Id = model.Id;
            }

            if (model.Id == 0)
            {
                _repository.Create(entity);
            }
            else
            {
                _repository.Update(entity);
            }

            _repository.Save();
            model.Id = entity.Id;
            return new RawResponseModel<CategoryModel>(model);
        }

        /// <summary>Delete category.</summary>
        /// <param name = "model">category model.</param>
        /// <returns>The <see cref = "CategoryModel"/>.</returns>
        public DeleteResponseModel Delete(CategoryModel model)
        {
            var entity = new Category();
            if (model.Id <= 0)
            {
                return new DeleteResponseModel("Can't delete items due to missing some information or invalid data", false);
            }
            else
            {
                entity.Id = model.Id;
            }

            _repository.Delete(entity);
            _repository.Save();
            return new DeleteResponseModel("Deleted", true);
        }
    }
}