///// <autogenerated>Remove this line to stop Code Generation</autogenerated>
///// <by>serverstartup.txt</by>
///// <module>UserDetails</module>
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using Microsoft.AspNetCore.Mvc;
using System;
using System.IO;
using System.Reflection;
using System.Text;
using Example.Entities;
using Example.Entities.Repository;
using Example.Business;
using Example.Business.Service;
using Example.Business.Contracts;
//using Example.WebApi.Handlers;
using Example.Models;
using Example.WebApi.Controllers.Utilities;

namespace Example
{
    public class Startup
    {
        IWebHostEnvironment _env;
        public Startup(IConfiguration configuration, IWebHostEnvironment env)
        {
            Configuration = configuration;
            _env = env;
        }

        public IConfiguration Configuration
        {
            get;
        }

        public static IConfiguration StaticConfig
        {
            get;
            private set;
        }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            //services.Configure<UserAuthenticationModel>(Configuration.GetSection("User"));
            services.Configure<ApiBehaviorOptions>(options =>
            {
            //// options.SuppressModelStateInvalidFilter = true;
            }

            );
            services.AddHttpContextAccessor();
            services.AddControllers();
            services.AddMemoryCache();
            services.AddRouting(opt => opt.LowercaseUrls = true);
            //services.AddScoped<IAuthenticationHandler, AuthenticationHandler>();
            services.AddScoped(typeof(IRepository<>), typeof(Repository<>));
            services.AddScoped<IFileUploadService, FileUploadService>();
            //// region ModuleListManualService#
            services.AddScoped<IGenderService, GenderService>();
            services.AddScoped<ICategoryService, CategoryService>();
            //// endregion ModuleListManualService#
            services.AddDbContext<ExampleDbContext>(options =>
            {
                options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection"));
            }

            );
            services.AddCors(options =>
            {
                options.AddPolicy("AllowOrigin", builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader().WithExposedHeaders("Token", "RefreshToken"));
            }

            );
            services.AddMvc(options =>
            {
            }

            );
            // Register the Swagger generator, defining 1 or more Swagger documents
            services.AddSwaggerGen(c =>
            {
                c.EnableAnnotations();
                var version = Assembly.GetEntryAssembly().GetName().Version;
                var apiBuildNumber = $"{version.Major}.{version.Minor}.{version.Revision}";
                c.SwaggerDoc("v1", new OpenApiInfo{Title = "Example REST API", Version = "v1", Description = $"<strong>Build #: </strong> {apiBuildNumber}"});
                var xmlFile = $"\\wwwroot\\documentation.xml";
                var xmlPath = _env.ContentRootPath + xmlFile;
                c.IncludeXmlComments(xmlPath);
            }

            );
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            // Apply migrations to the database.
            /// if (env.IsDevelopment())
            /// {
            app.UseDeveloperExceptionPage();
            /// }
            app.UseStaticFiles();
            app.UseHttpsRedirection();
            app.UseRouting();
            app.UseCors(builder => builder.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
            //app.UseAuthentication();
            //app.UseAuthorization();
            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            }

            );
            // Enable middleware to serve generated Swagger as a JSON endpoint.
            app.UseSwagger();
            // Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.),
            // specifying the Swagger JSON endpoint.
            app.UseSwaggerUI(c =>
            {
                //c.InjectStylesheet("/theme-material.css");
                c.EnableDeepLinking();
                c.DisplayRequestDuration();
                if (env.IsDevelopment())
                {
                    c.SwaggerEndpoint("/swagger/v1/swagger.json", "Example REST API'S V1");
                    c.RoutePrefix = string.Empty;
                }
                else
                {
                    c.SwaggerEndpoint("./swagger/v1/swagger.json", "Burgan Bank REST API'S V1");
                    c.RoutePrefix = string.Empty;
                }
            }

            );
        }

        private static void UpdateDatabase(IApplicationBuilder app)
        {
            using (var serviceScope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope())
            {
                using (var context = serviceScope.ServiceProvider.GetService<ExampleDbContext>())
                {
                    context.Database.Migrate();
                }
            }
        }
    }
}